import threading
import socket
import sys
import time
import streamlit as st
import time
import random
# Streamlit configuration
st.set_page_config(page_title="Chatroom", layout="wide")

# Global state for storing messages
if "messages" not in st.session_state:
    st.session_state.messages = []

# Function to update chat messages
def update_messages(new_messages):
    st.session_state.messages.extend(new_messages)

# Thread for receiving messages
class ReceiveThread(threading.Thread):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock

    def run(self):
        while True:
            try:
                message = self.sock.recv(1024).decode('ascii')
                if message:
                    st.session_state.messages.append(message)
                    st.experimental_rerun()  # Refresh the Streamlit app to display new messages
            except (ConnectionResetError, ConnectionAbortedError):
                st.session_state.messages.append("Disconnected from server.")
                break

# Main client class
class Client:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(0.1)  # Non-blocking with a timeout
        self.name = None

    def connect(self):
        try:
            self.sock.connect((self.host, self.port))
            return True
        except Exception as e:
            st.session_state.messages.append(f"Error connecting to server: {e}")
            return False

    def start(self, name):
        self.name = name
        self.sock.sendall(f"server: {self.name} has joined the chat.".encode('ascii'))
        st.session_state.messages.append(f"You joined as {self.name}. Type 'QUIT' to leave.")

    def receive_message(self):
        try:
            message = self.sock.recv(1024).decode('ascii')
            return message
        except socket.timeout:
            return None  # No new messages
        except Exception as e:
            return f"Error: {e}"

    def send_message(self, message):
        try:
            self.sock.sendall(message.encode('ascii'))
        except Exception as e:
            st.session_state.messages.append(f"Error sending message: {e}")


# Streamlit UI
import streamlit as st
import time
from datetime import datetime

import streamlit as st
import time
from datetime import datetime

def main():
    # Initialize session state variables
    if "client" not in st.session_state:
        st.session_state.client = None

    if "messages" not in st.session_state:
        st.session_state.messages = []  # Stores messages as tuples: (timestamp, username, message)

    if "last_fetch" not in st.session_state:
        st.session_state.last_fetch = time.time()

    if "refresh_trigger" not in st.session_state:
        st.session_state.refresh_trigger = 0  # Track refresh button clicks

    st.title("Chatroom Client")
    st.sidebar.title("Connection Settings")

    # Sidebar inputs for server details
    host = st.sidebar.text_input("Server Host", value="127.0.0.1")
    port = st.sidebar.number_input("Server Port", value=1060, step=1, format="%d")
    name = st.sidebar.text_input("Your Name", value="")

    # Connect to the server
    if st.sidebar.button("Connect") and not st.session_state.client:
        client = Client(host, port)
        if client.connect():
            client.start(name)
            st.session_state.client = client
            st.session_state.messages.append(
                (datetime.now().strftime("%H:%M:%S"), "System", f"Connected to {host}:{port} as {name}")
            )

    # Poll for new messages
    if st.session_state.client:
        current_time = time.time()
        if current_time - st.session_state.last_fetch > 0.5:  # Poll every 0.5 seconds
            new_message = st.session_state.client.receive_message()
            if new_message:
                # Assume server sends messages in format: "username: message"
                if ": " in new_message:
                    username, message = new_message.split(": ", 1)
                    st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), username, message))
                else:
                    st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), "Unknown", new_message))
            st.session_state.last_fetch = current_time

    # Styled message container
    st.write("### Messages:")
    message_container = st.empty()
    with message_container:
        # Start the container div
        messages_html = (
            f"<div style='height:400px; overflow-y:auto; padding:10px; border:1px solid #ddd; background-color:#f9f9f9; border-radius: 5px;'>"
        )
        for msg in st.session_state.messages:
            if len(msg) == 3:  # Ensure message has the expected format
                timestamp, username, message = msg
                user_color = hash(username) % 360  # Generate a unique color for each username
                
                # Add each message to the container
                messages_html += (
                    f"<p style='margin:5px 0;'>"
                    f"<span style='color:gray;'>[{timestamp}]</span> "
                    f"<span style='color:hsl({user_color}, 70%, 50%); font-weight:bold;'>{username}:</span> "
                    f"{message}"
                    f"</p>"
                )
        # Close the container div
        messages_html += "</div>"

        # Render the entire HTML content
        st.markdown(messages_html, unsafe_allow_html=True)



    # Input box and buttons at the bottom of the page
 # Input box and buttons at the bottom of the page
    if st.session_state.client:
        if "current_input" not in st.session_state:
            st.session_state.current_input = ""

        st.write("---")  # Separator to push input to the bottom
        with st.container():
            # Create a horizontal layout for the input box and buttons
            col1, col2, col3 = st.columns([1, 8, 1])

            with col1:
                if st.button("Refresh Chat", key="refresh_button"):
                    st.session_state.refresh_trigger += 1  # Trigger a manual refresh

            with col2:
                # Input box for typing messages
                message = st.text_input(
                    "Message Input",  # Non-empty label
                    value=st.session_state.current_input,
                    placeholder="Type your message here...",
                    key="message_input_unique",
                    label_visibility="collapsed"  # Hide the label visually
                )

            with col3:
                if st.button("Send", key="send_button"):
                    if message.strip():
                        st.session_state.client.send_message(f"{name}: {message.strip()}")
                        st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), name, message.strip()))
                        st.session_state.current_input = ""  # Reset the
if __name__ == "__main__":
    main()




import threading
import socket
import sys
import time
import streamlit as st
import time
import random
# Streamlit configuration
st.set_page_config(page_title="Chatroom", layout="wide")

# Global state for storing messages
if "messages" not in st.session_state:
    st.session_state.messages = []

# Function to update chat messages
def update_messages(new_messages):
    st.session_state.messages.extend(new_messages)

# Thread for receiving messages
class ReceiveThread(threading.Thread):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock

    def run(self):
        while True:
            try:
                message = self.sock.recv(1024).decode('ascii')
                if message:
                    st.session_state.messages.append(message)
                    st.experimental_rerun()  # Refresh the Streamlit app to display new messages
            except (ConnectionResetError, ConnectionAbortedError):
                st.session_state.messages.append("Disconnected from server.")
                break

# Main client class
class Client:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(0.1)  # Non-blocking with a timeout
        self.name = None

    def connect(self):
        try:
            self.sock.connect((self.host, self.port))
            return True
        except Exception as e:
            st.session_state.messages.append(f"Error connecting to server: {e}")
            return False

    def start(self, name):
        self.name = name
        self.sock.sendall(f"server: {self.name} has joined the chat.".encode('ascii'))
        st.session_state.messages.append(f"You joined as {self.name}. Type 'QUIT' to leave.")

    def receive_message(self):
        try:
            message = self.sock.recv(1024).decode('ascii')
            return message
        except socket.timeout:
            return None  # No new messages
        except Exception as e:
            return f"Error: {e}"

    def send_message(self, message):
        try:
            self.sock.sendall(message.encode('ascii'))
        except Exception as e:
            st.session_state.messages.append(f"Error sending message: {e}")


# Streamlit UI
import streamlit as st
import time
from datetime import datetime

import streamlit as st
import time
from datetime import datetime

def main():
    # Initialize session state variables
    if "client" not in st.session_state:
        st.session_state.client = None

    if "messages" not in st.session_state:
        st.session_state.messages = []  # Stores messages as tuples: (timestamp, username, message)

    if "last_fetch" not in st.session_state:
        st.session_state.last_fetch = time.time()

    if "refresh_trigger" not in st.session_state:
        st.session_state.refresh_trigger = 0  # Track refresh button clicks

    st.title("Chatroom Client")
    st.sidebar.title("Connection Settings")

    # Sidebar inputs for server details
    host = st.sidebar.text_input("Server Host", value="127.0.0.1")
    port = st.sidebar.number_input("Server Port", value=1060, step=1, format="%d")
    name = st.sidebar.text_input("Your Name", value="")

    # Connect to the server
    if st.sidebar.button("Connect") and not st.session_state.client:
        client = Client(host, port)
        if client.connect():
            client.start(name)
            st.session_state.client = client
            st.session_state.messages.append(
                (datetime.now().strftime("%H:%M:%S"), "System", f"Connected to {host}:{port} as {name}")
            )

    # Poll for new messages
    if st.session_state.client:
        current_time = time.time()
        if current_time - st.session_state.last_fetch > 0.5:  # Poll every 0.5 seconds
            new_message = st.session_state.client.receive_message()
            if new_message:
                # Assume server sends messages in format: "username: message"
                if ": " in new_message:
                    username, message = new_message.split(": ", 1)
                    st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), username, message))
                else:
                    st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), "Unknown", new_message))
            st.session_state.last_fetch = current_time

    # Styled message container
    st.write("### Messages:")
    message_container = st.empty()
    with message_container:
        # Start the container div
        messages_html = (
            f"<div style='height:400px; overflow-y:auto; padding:10px; border:1px solid #ddd; background-color:#e0ffff; border-radius: 5px;'>"
        )
        for msg in st.session_state.messages:
            if len(msg) == 3:  # Ensure message has the expected format
                timestamp, username, message = msg
                user_color = hash(username) % 360  # Generate a unique color for each username
                
                # Add each message to the container
                messages_html += (
                    f"<p style='margin:5px 0;'>"
                    f"<span style='color:gray;'>[{timestamp}]</span> "
                    f"<span style='color:hsl({user_color}, 70%, 50%); font-weight:bold;'>{username}:</span> "
                    f"{message}"
                    f"</p>"
                )
        # Close the container div
        messages_html += "</div>"

        # Render the entire HTML content
        st.markdown(messages_html, unsafe_allow_html=True)



    # Input box and buttons at the bottom of the page
 # Input box and buttons at the bottom of the page
    if st.session_state.client:
        if "current_input" not in st.session_state:
            st.session_state.current_input = ""

        st.write("---")  # Separator to push input to the bottom
        with st.container():
            # Create a horizontal layout for the input box and buttons
            col1, col2, col3 = st.columns([1, 8, 1])

            with col1:
                if st.button("Refresh Chat", key="refresh_button"):
                    st.session_state.refresh_trigger += 1  # Trigger a manual refresh

            with col2:
                # Input box for typing messages
                message = st.text_input(
                    "Message Input",  # Non-empty label
                    value=st.session_state.current_input,
                    placeholder="Type your message here...",
                    key="message_input_unique",
                    label_visibility="collapsed"  # Hide the label visually
                )

            with col3:
                if st.button("Send", key="send_button"):
                    st.session_state.refresh_trigger += 1 
                    if message.strip():
                        st.session_state.client.send_message(f"{name}: {message.strip()}")
                        st.session_state.messages.append((datetime.now().strftime("%H:%M:%S"), name, message.strip()))
                        st.session_state.current_input = ""  # Reset the
                    st.session_state.refresh_trigger += 1 

if __name__ == "__main__":
    main()

